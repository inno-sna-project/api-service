# with the help of https://jlelse.blog/dev/drone-dind
kind: pipeline
name: default
type: docker

steps:
  - name: build
    image: docker/compose:1.29.2
    volumes:
      - name: dockersock
        path: /var/run
    environment:
      DOCKER_PASSWORD:
        from_secret: docker_password
      DOCKER_BUILDKIT: 1
    commands:
      - sleep 15  # give docker enough time to start
      - echo $DOCKER_PASSWORD | docker login --username snaprojectuser --password-stdin
      - cp .env.prod-sample .env.prod
      - cp .env.prod.db-sample .env.prod.db
      - docker-compose -f docker-compose.prod.yml build --pull
      - docker-compose -f docker-compose.prod.yml push
    when:
      event:
        - pull_request
        - push

  # Recreate db every push
  - name: deploy db (optional)
    image: appleboy/drone-ssh
    settings:
      host:
        - 45.137.190.96  # deploy db only to one server
        # - 45.137.190.92
      username: root
      port: 22
      key:
        from_secret: ssh_key
      environment:
        POSTGRES_PASSWORD:
          from_secret: postgres_password
      script:
        - cd /api_service
        # Just handle env on server side by modifying /api_service/.env.prod.db
#        - echo -e "POSTGRES_USER=hello_flask
#            \nPOSTGRES_PASSWORD=$POSTGRES_PASSWORD
#            \nPOSTGRES_DB=hello_flask_prod" > .env.prod.db
#        - cat .env.prod.db # debug
        - docker pull postgres:13-alpine
        - docker stop api-service-db
        - docker rm api-service-db
        - sleep 2
        - docker volume rm postgres-data
        - docker run -d --name api-service-db -p 5432:5432 --env-file .env.prod.db -v postgres-data:/var/lib/postgresql/data postgres:13-alpine
        - docker ps
      trigger:
        event:
          - push

  - name: deploy web
    image: appleboy/drone-ssh
    settings:
      host:
        - 45.137.190.96
        - 45.137.190.92
      username: root
      port: 22
      key:
        from_secret: ssh_key
      environment:
        DATABASE_URL:
          from_secret: database_url
        SQL_HOST:
          from_secret: sql_host
      script:
        - cd /api_service
        # Just handle env on server side by modifying /api_service/.env.prod
#        - echo -e "FLASK_APP=project/__init__.py
#            \nFLASK_DEBUG=0
#            \nSQL_PORT=5432
#            \nDATABASE_URL=$DATABASE_URL
#            \nSQL_HOST=$SQL_HOST
#            \nDATABASE=postgres
#            \nAPP_FOLDER=/home/app/web" > .env.prod
#        - cat .env.prod # debug
        - docker pull snaprojectuser/api-service-web
        - docker stop api-service-web
        - docker rm api-service-web
        - docker run -d --name api-service-web -p 5000:5000 --env-file .env.prod snaprojectuser/api-service-web:latest gunicorn --bind 0.0.0.0:5000 manage:app
        - docker ps
      trigger:
        event:
          - push

  # Populate db every push
  - name: populate db (optional)
    image: appleboy/drone-ssh
    settings:
      host:
        - 45.137.190.96
      username: root
      port: 22
      key:
        from_secret: ssh_key
      script:
        - docker exec api-service-web python manage.py create_db
        - docker exec api-service-web python manage.py seed_db
      trigger:
        event:
          - push

services:
  - name: docker
    image: docker:dind
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

trigger:
  branch:
    - main
  event:
    - push